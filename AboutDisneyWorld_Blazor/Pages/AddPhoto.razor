@page "/addphoto"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@inject MongoDBPhotoService PhotoService
@inject IWebHostEnvironment Env
@inject HttpClient Http

<PageTitle>Add Photo</PageTitle>

<div class="mb-3">
    <h3>Add Photo</h3>

    <EditForm Model="@newPhoto" OnValidSubmit="InsertPhoto" FormName="AddPhotoForm">
        <div class="mb-3 d-flex align-items-center gap-2">
            <label class="form-label btn btn-primary" for="fileselect">Select Photo to Upload</label>
            <InputFile style="display: none" id="fileselect" name="fileselect" OnChange="@HandleFileSelected" />
            
            @if(uploadedFile != null){
                <p>Selected Photo: @newPhoto.FileName</p>
            }
            else{
                <p>No Photo Selected</p>
            }
        </div>

        <div class="mb-3">
            <label class="form-label" for="title">Photo Title</label>
            <InputText @bind-Value="newPhoto.Title" id="title" name="title" placeholder="Title" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label" for="caption">Photo Caption</label>
            <InputText @bind-Value="newPhoto.Caption" id="caption" name="caption" placeholder="Caption" class="form-control" />
        </div>

        @if (!string.IsNullOrWhiteSpace(previewImageUrl))
        {
            <div class="mb-3">
                <label class="form-label">Preview</label>
                <br>
                <img src="@previewImageUrl" alt="Preview" class="img-thumbnail" style="max-width: 300px;" />
            </div>
        }
        
        <button type="submit" class="btn btn-success">Save</button>
    </EditForm>
</div>

@code {
    private Photo newPhoto = new();
    private IBrowserFile? uploadedFile;
    private string? previewImageUrl;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        Console.WriteLine("HandleFileSelected triggered"); // Confirm trigger
        uploadedFile = e.File;

        // Base64 preview
        using var ms = new MemoryStream();
        await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(ms);
        var buffer = ms.ToArray();
        var base64 = Convert.ToBase64String(buffer);
        var contentType = string.IsNullOrWhiteSpace(uploadedFile.ContentType) ? "image/jpeg" : uploadedFile.ContentType;
        previewImageUrl = $"data:{contentType};base64,{base64}";

        // Preview Data
        using var image = Image.Load(buffer);
        image.Mutate(x => x.Resize(new ResizeOptions
        {
            Mode = ResizeMode.Max,
            Size = new Size(325, 0)
        }));

        using var msPreview = new MemoryStream();
        await image.SaveAsJpegAsync(msPreview);
        newPhoto.PreviewData = msPreview.ToArray();

        newPhoto.FileName = uploadedFile.Name;
        newPhoto.ImageData = buffer;
        newPhoto.ContentType = contentType;

        StateHasChanged(); // Show preview
    }

    private async Task InsertPhoto()
    {
        Console.WriteLine($"Title: {newPhoto.Title}");
        Console.WriteLine($"Name: {newPhoto.FileName}");

        if (!string.IsNullOrWhiteSpace(newPhoto.FileName) && !string.IsNullOrWhiteSpace(newPhoto.Title))
        {
            var content = new MultipartFormDataContent();
            var stream =  new MemoryStream();
            await uploadedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream);
            stream.Position = 0; // 🔁 Reset the position before sending
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(uploadedFile.ContentType);

            content.Add(fileContent, "file", uploadedFile.Name);
            content.Add(new StringContent(newPhoto.Title), "title");
            content.Add(new StringContent(newPhoto.Caption), "caption");

            var response = await Http.PostAsync("api/photo/upload", content);
            if (response.IsSuccessStatusCode)
            {
                // Show success message or refresh list
                Console.WriteLine("Photo added to MongoDB");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Upload failed: {error}");
            }
        }
        else
        {
            Console.WriteLine("Missing file or title");
        }

        newPhoto = new Photo();
        uploadedFile = null;
        previewImageUrl = null;
    }
}